<?xml version="1.0" encoding="utf-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
        http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>SpringStudy</groupId> <!-- 프로젝트 그룹지정 -->
    <artifactId>Study</artifactId> <!-- 프로젝트의 식별자 -->
    <version>0.0.1-SNAPSHOT</version>

    <dependencies>
        <!-- 의존을 추가한다는 것은, 일반적인 Java 어플리케이션에서 ClassPath에 모듈을 추가한다는 것 -->
        <dependency> <!-- 프로젝트에서 5.2.3버전의 spring-context모듈을 사용한다고 설정 -->
            <groupId>org.springframework</groupId>
            <!-- Maven 은 한개의 모듈을 Artifact 단위로 관리한다. -->
            <artifactId>spring-context</artifactId> <!-- 실제 이름은 .jar가 붙음. 컴파일하고 실행 시 classPath에 spring-context.jar 추가한다는 의미 -->
            <version>5.2.3.RELEASE</version>
        </dependency>
        <!-- spring-context를 다운받은적이 없는데? -> Maven이 알아서 해준다.
            - Maven Local Repository 검색 후 있으면 해당파일 사용
            - 없으면 Maven Remote Repository 에서 다운로드해서 추가해줌 ( 프로젝트 폴더로 이동하여 mvn compile 하면 다운받는 걸 볼 수 있음 )
            - 기본 리포지토리 : [user_home]\.m2\repository\org\springframework\spring-context\5.2.3.RELEASE
            - Apache 에서 Maven 을 관리. Repository 의 등록방법도 제공한다. -> 따라서 dependency 만 잘 추가해주면 필요한 jar 파일을 손쉽게 프로젝트에 추가할 수 있다.
         -->
        <!-- Transitive Dependencies 의존전이
            - 의존모듈이 의존하는 모듈도 자동으로 다운받는다.
            - 의존모듈 다운로드 시, .pom 파일을 먼저 받는데, 여기에 종속정보가 포함되어있으므로 전부 자동으로 다운받아진다.
        -->
        <!-- aspectjweaver
            - aop 기능을 사용하기 위한 의존모듈이다. aop기능은 spring-context의 spring-aop가 제공하지만, aop설정 애노테이션사용을 위해 이 의존이 필요하다.
            - 의존성을 추가해보자. pom.xml 내부에서 생성 - 종속요소 추가로 검색해서 추가한다.
            - 추가 한 뒤에는 종속 모듈을 다운받아야지? pom.xml 우클릭 후 maven - 프로젝트 다시 로드하면 자동으로 종속모듈을 다운받아 설정한다!
         -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>1.9.9.1</version>
        </dependency>

        <!-- JdbcTemplate 등 JDBC 연동에 필요한 기능 제공 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.3.23</version>
        </dependency>
        <!-- Spring 의 transaction 기능을 이용하려면 spring-tx 모듈이 필요한데, 여기에 포함되있다. -->

        <!-- MySQL 연결에 필요한 JDBC 드라이버 제공 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>

        <!-- DB 커넥션풀 기능 제공 -->
        <dependency>
            <groupId>org.apache.tomcat</groupId>
            <artifactId>tomcat-jdbc</artifactId>
            <version>8.5.82</version>
        </dependency>
        <!-- 일정개수의 DB 커넥션을 미리 만들어두는 기법이다. connection 개수도 일정수로 유지해서 부하를 제어할 수 있다.
            실 사용에서는 connection 을 재활용하므로, 동시 사용할 수 있는 connection 들의 모음이라고 생각하면 편하다.
            이를 제공하는 모듈은 Tomcat JDBC, HikariCP, DBCP, c3p0 등이 있는데, JDBC나 HikariCP 가 안정적이다.
         -->

        <!-- spring5 는 자체 logging module 인 spring-jcl 을 사용한다.
            이 모듈은 직접 로깅을 남기지 않고 다른 로깅모듈을 이용해서 로그를 남긴다.
            예를 들어, class path 에 Log4j2 가 존재하면 그걸 사용한다.
            고로, 쓰고싶은 로깅모듈만 class path 에 추가하면 된다.

            아래 로깅 모듈이 있으면 Transaction 이 처리되는지 log 로 확인할 수 있다.
            아래 2개의 dependency 는 logback 을 위한 모듈이다.-->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.36</version>
        </dependency>

        <!-- logback 모듈은 설정파일도 필요하기 때문에, resource 폴더에 추가해줘야 한다.
            메시지 형식, 기록위치를 설정파일에서 읽어온다.-->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.11</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin> <!-- java 11버전으로 컴파일하고 결과 클래스 생성한다는 뜻. 소스코드의 인코딩은 utf-8 -->
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                    <encoding>utf-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>